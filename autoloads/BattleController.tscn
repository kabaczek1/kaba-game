[gd_scene load_steps=18 format=3 uid="uid://du1wclo2v6jb"]

[ext_resource type="PackedScene" uid="uid://gu3vvbwh7xrp" path="res://gameplay/elements/grid_unit/grid_unit.tscn" id="2_25ddf"]
[ext_resource type="Texture2D" uid="uid://jlb70ugqwqns" path="res://assets/gfx/cursor3.png" id="2_r3u1s"]
[ext_resource type="Script" uid="uid://citer6numwmnw" path="res://content/abilities/ability.gd" id="2_voyn8"]
[ext_resource type="Texture2D" uid="uid://cuibe6vdblunf" path="res://assets/tiny_rpg_character/Characters/Orc/Orc with shadows/Orc.png" id="3_voyn8"]

[sub_resource type="GDScript" id="GDScript_s73t2"]
script/source = "extends Node

# config
@export var grid_unit_scene: PackedScene


#temp
@export var enemy_unit_res: UnitResource

#var main_grid: MainGrid
#var range_grid: OffsetGrid
#var obstacle_grid: OffsetGrid
#var grid_path: GridPath
#var grid_navigation: GridNavigation

#var cursor: Cursor
#var info_box: InfoBox
#var level_container: Node2D

var all_grid_cells: Array[Vector2i]

var level: Level
var bs: BattleScene #battle_scene

var units: Dictionary[Vector2i, GridUnit]

var current_turn: int
var current_turn_team: Enums.Team

func _ready() -> void:
	EventBus.battle_scene_loaded.connect(on_battle_scene_loaded)
	EventBus.player_turn_ended.connect(on_player_turn_ended)
	EventBus.player_turn_started.connect(on_player_turn_started)

func on_player_turn_ended():
	
	for unit in get_all_units():
		unit.deselect()
		if unit.team == Enums.Team.ENEMY:
			unit.new_turn()
	print(\"enemy AI\")
	await bs.info_box.display(\"enemy turn\")
	current_turn += 1
	EventBus.player_turn_started.emit()

func on_player_turn_started():
	for unit in get_all_units():
		unit.deselect()
		if unit.team == Enums.Team.PLAYER:
			unit.new_turn()
	await bs.info_box.display(\"player turn\")


#region setup
func on_battle_scene_loaded(current_battle_scene):
	bs = current_battle_scene
	setup_new_battle()

func setup_new_battle():
	print(\"setup_new_battle\")
	current_turn = 1
	print(RunController.team)
	print(RunController.level)
	setup_level()
	setup_teams()
	update_unit_dictionary()

func setup_teams():
	var player_team = TeamController.new(\"PlayerTeam\", true, Enums.Team.PLAYER, \"PLAYER TURN\")
	player_team.name = \"PlayerTeam\"
	bs.teams_container.add_child(player_team)
	setup_player_units(player_team)
	var enemy_team = TeamController.new(\"EnemyTeam\", false, Enums.Team.ENEMY, \"ENEMY TURN\")
	enemy_team.name = \"EnemyTeam\"
	bs.teams_container.add_child(enemy_team)
	setup_enemy_units(enemy_team)

func setup_player_units(tc: TeamController):
	var x = 1
	for unit_resource in RunController.team:
		var unit = grid_unit_scene.instantiate()
		unit.setup(unit_resource, Enums.Team.PLAYER, Vector2i(3, 2 + x))
		x += 1
		tc.add_child(unit)

func setup_enemy_units(tc: TeamController):
	for i in range(RunController.level.difficulty):
		var unit = grid_unit_scene.instantiate()
		unit.setup(enemy_unit_res, Enums.Team.PLAYER, Vector2i(14, 2 + i))
		tc.add_child(unit)

func setup_level():
	level = RunController.level.level_scene.instantiate()
	bs.level_container.add_child(level)
	level.setup(RunController.level)
	
	#temp
	var level_cells = level.level_cells
	for key in level_cells:
		print(key, \" - \", level_cells[key])
		if level_cells[key] == Enums.LevelTargetType.OBSTACLE:
			bs.obstacle_grid.cells.append(key)
			bs.obstacle_grid.redraw()

#endregion

#func process_turn():
	#for team in teams:
		#if team.player_controlled:
			#info_box.display(team.start_turn_message)
			#await EventBus.info_box_animation_finished
			#EventBus.player_turn_started.emit()
		#if not(team.player_controlled):
			#info_box.display(team.start_turn_message)
			#await EventBus.info_box_animation_finished
			#print(\"AI turn\")

#region units
func get_teams():
	return bs.teams_container.get_children()

func update_unit_dictionary():
	var units_array: Array[GridUnit] = []
	units.clear()
	for team in get_teams():
		units_array.append_array(team.get_units())
	for unit in units_array:
		units.set(unit.cell, unit)

func get_all_units() -> Array[GridUnit]:
	return units.values()

func get_all_unit_cells() -> Array[Vector2i]:
	return units.keys()

func get_unit_by_cell(cell: Vector2i):
	if units.has(cell):
		return units.get(cell)
	return null

func remove_unit_from_unit_dictionary(unit: GridUnit):
	units.erase(unit.cell)
#endregion

#region grid
func position_to_cell(position: Vector2) -> Vector2i:
	return bs.main_grid.position_to_grid(position)

func cell_to_position(cell: Vector2i) -> Vector2:
	return bs.main_grid.grid_to_position(cell)

func get_all_grid_cells() -> Array[Vector2i]:
	if all_grid_cells != []:
		return all_grid_cells
	var output: Array[Vector2i] = []
	var grid_end = bs.main_grid.grid_region.end
	for i in range(grid_end.x):
		for j in range(grid_end.y):
			all_grid_cells.append(Vector2i(i,j))
	return all_grid_cells

#endregion
"

[sub_resource type="GDScript" id="GDScript_8bsjd"]
script/source = "extends Command

class_name MoveCommand

var original_move_array: Array[Vector2i]

func _init(_unit: GridUnit, _ability_options: Dictionary[String, Variant]) -> void:
	super(_unit, _ability_options)

func execute():
	print(\"MoveCommand - execute\")
	print(unit.unit_res.name)
	print(ability_options)
	var ability = unit.unit_res.move_ability
	if ability.input_steps.is_empty():
		return
	var input_step = ability.input_steps[0]
	var initial_cells = BattleController.bs.main_grid.get_shape_around_cell(ability.grid_range, unit.cell, input_step.shape)
	var available_cells:Array[Vector2i] = []
	var level_cells = BattleController.level.get_ground_tiles()
	print(level_cells)
	for cell in initial_cells:
		if BattleController.bs.grid_navigation.find_path(unit.cell, ability_options.get(\"cell\"), level_cells).size() <= ability.grid_range:
			available_cells.append(cell)
	
	var path = BattleController.bs.grid_navigation.find_path(unit.cell, ability_options.get(\"cell\"), available_cells)
	unit.move(path)
	unit.moved = true
	BattleController.update_unit_dictionary()
	#original_move_array = target
	#print(\"Saving\", str(original_move_array))
	#print(\"Move Unit\", str(source), \" on path \", str(target))
	#source.move(target.duplicate())

func undo():
	print(\"MoveCommand - undo\")
	#print(\"original_move_array\", str(original_move_array))
	#original_move_array.reverse()
	#print(\"original_move_array\", str(original_move_array))
	#print(\"Move Unit\", str(source), \" on path \", str(original_move_array))
	#source.move(original_move_array.duplicate())
	#EventBus.move_undid.emit()
"

[sub_resource type="CompressedTexture2D" id="CompressedTexture2D_7rqj6"]
load_path = "res://.godot/imported/melee_attack.png-2dbd099bb721072a1a0191541c0544d9.ctex"

[sub_resource type="GDScript" id="GDScript_086yp"]
script/source = "extends Resource

class_name Ability

@export var name: String = \"AbilityName\"
@export var description: String = \"AbilityDescription\"
@export var icon: Texture

@export var has_cost: bool = true
@export var cost: int = 1

@export var has_range: bool = false
@export var grid_range: int

@export var has_damage: bool = false
@export var damage: int

@export var has_res: bool = false #resource
@export var res: int
@export var res_name: String

@export var allow_multiple_uses_per_turn: bool = false
var used: bool = false

@export var input_steps: Array[AbilityInputStep]

@export var command: GDScript #Command https://www.reddit.com/r/godot/comments/138el4k/using_scripts_via_an_export_variable/
#@export var ability_input: AbilityInput
#@export var ability_validator: AbilityResolver
"

[sub_resource type="Resource" id="Resource_4smfu"]
script = SubResource("GDScript_086yp")
name = "Sword Attack"
description = "Slash an enemy"
icon = SubResource("CompressedTexture2D_7rqj6")
has_cost = true
cost = 1
has_range = true
grid_range = 1
has_damage = true
damage = 2
has_res = false
res = 0
res_name = ""
allow_multiple_uses_per_turn = false
input_steps = []
command = SubResource("GDScript_8bsjd")
metadata/_custom_type_script = "uid://c6t3hnpdadva5"

[sub_resource type="GDScript" id="GDScript_brghf"]
script/source = "extends Command

class_name BlinkCommand

var original_move_array: Array[Vector2i]

func _init(_unit: GridUnit, _ability_options: Dictionary[String, Variant]) -> void:
	super(_unit, _ability_options)

func execute():
	print(\"BlinkCommand - execute\")
	print(unit.unit_res.name)
	print(ability_options)
	var ability = unit.unit_res.move_ability
	if ability.input_steps.is_empty():
		return
	var input_step = ability.input_steps[0]
	var available_cells = BattleController.bs.main_grid.get_shape_around_cell(ability.grid_range, unit.cell, input_step.shape)
	unit.cell = ability_options.get(\"cell\")
	unit.position = BattleController.cell_to_position(unit.cell)
	unit.moved = true
	BattleController.update_unit_dictionary()
	#original_move_array = target
	#print(\"Saving\", str(original_move_array))
	#print(\"Move Unit\", str(source), \" on path \", str(target))
	#source.move(target.duplicate())

func undo():
	print(\"MoveCommand - undo\")
	#print(\"original_move_array\", str(original_move_array))
	#original_move_array.reverse()
	#print(\"original_move_array\", str(original_move_array))
	#print(\"Move Unit\", str(source), \" on path \", str(original_move_array))
	#source.move(original_move_array.duplicate())
	#EventBus.move_undid.emit()
"

[sub_resource type="CompressedTexture2D" id="CompressedTexture2D_ucp4m"]
load_path = "res://.godot/imported/jump_move.png-763b3af32f2782546d69096047275f53.ctex"

[sub_resource type="GDScript" id="GDScript_3txjr"]
script/source = "extends Validator

func validate(origin:Vector2i, target:Vector2i) -> bool:
	print(BattleController.level.level_cells[target])
	return true
"

[sub_resource type="GDScript" id="GDScript_dddca"]
script/source = "extends Resource

class_name AbilityInputStep

@export var description: String
@export var option_key: String
@export var target: Enums.TargetType
@export var shape: Enums.Shape
@export var range: int
@export var cell_validator: Validator

func validate_cell(_cell):
	return true

func validate_option_target(_value):
	return true
"

[sub_resource type="Resource" id="Resource_wbuox"]
script = SubResource("GDScript_dddca")
description = "Select a cell"
option_key = "cell"
target = 0
shape = 0
range = 0
cell_validator = SubResource("GDScript_3txjr")
metadata/_custom_type_script = "uid://dt6jt3cj20ra7"

[sub_resource type="Resource" id="Resource_mleiq"]
script = SubResource("GDScript_086yp")
name = "Fireball"
description = "Smoke them up"
icon = SubResource("CompressedTexture2D_ucp4m")
has_cost = true
cost = 1
has_range = true
grid_range = 2
has_damage = false
damage = 0
has_res = false
res = 0
res_name = ""
allow_multiple_uses_per_turn = false
input_steps = [SubResource("Resource_wbuox")]
command = SubResource("GDScript_brghf")
metadata/_custom_type_script = "uid://c6t3hnpdadva5"

[sub_resource type="GDScript" id="GDScript_fn33j"]
script/source = "extends Resource

class_name UnitResource

@export var name: String = \"UnitName\"
@export var description: String = \"UnitDescription\"
@export var icon: Texture
@export var texture: Texture

@export var base_hp: int = 3
@export var base_ap: int = 2
@export var base_move: int = 3

@export var move_ability: Ability
@export var attack_ability: Ability
@export var abilities: Array[Ability]
"

[sub_resource type="Resource" id="Resource_vmypg"]
script = SubResource("GDScript_fn33j")
name = "Lucek"
description = "Fighter"
icon = ExtResource("2_r3u1s")
texture = ExtResource("3_voyn8")
base_hp = 4
base_ap = 2
base_move = 3
move_ability = SubResource("Resource_mleiq")
attack_ability = SubResource("Resource_4smfu")
abilities = Array[ExtResource("2_voyn8")]([])
metadata/_custom_type_script = "uid://48wwea18pjpn"

[node name="BattleController" type="Node"]
script = SubResource("GDScript_s73t2")
grid_unit_scene = ExtResource("2_25ddf")
enemy_unit_res = SubResource("Resource_vmypg")
